/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 31 generated on 2011-02-17 16:26:51.453551
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70;
x0=IKsin(j[1]);
x1=IKcos(j[2]);
x2=IKsin(j[3]);
x3=IKcos(j[1]);
x4=IKcos(j[3]);
x5=IKcos(j[4]);
x6=IKsin(j[2]);
x7=IKsin(j[4]);
x8=((x2)*(x3));
x9=((x0)*(x1)*(x4));
x10=((x9)+(x8));
x11=((-1.00000000000000)*(x10));
x12=IKcos(j[6]);
x13=((x0)*(x5)*(x6));
x14=IKsin(j[6]);
x15=IKcos(j[5]);
x16=((x0)*(x6)*(x7));
x17=((x11)*(x5));
x18=((x17)+(x16));
x19=((x15)*(x18));
x20=IKsin(j[5]);
x21=((x0)*(x1)*(x2));
x22=((x3)*(x4));
x23=((((-1.00000000000000)*(x22)))+(x21));
x24=((x20)*(x23));
x25=((x19)+(x24));
x26=IKcos(j[0]);
x27=IKsin(j[0]);
x28=((x26)*(x6));
x29=((x1)*(x27)*(x3));
x30=((x28)+(x29));
x31=((-1.00000000000000)*(x30));
x32=((x31)*(x4));
x33=((x0)*(x2)*(x27));
x34=((x33)+(x32));
x35=((x27)*(x3)*(x6));
x36=((x1)*(x26));
x37=((((-1.00000000000000)*(x36)))+(x35));
x38=((x37)*(x5));
x39=((x34)*(x7));
x40=((((-1.00000000000000)*(x39)))+(x38));
x41=((x0)*(x27)*(x4));
x42=((-1.00000000000000)*(x2)*(x31));
x43=((x42)+(x41));
x44=((x20)*(x43));
x45=((x34)*(x5));
x46=((x37)*(x7));
x47=((x46)+(x45));
x48=((x15)*(x47));
x49=((x48)+(x44));
x50=((x27)*(x6));
x51=((x3)*(x36));
x52=((x50)+(((-1.00000000000000)*(x51))));
x53=((x1)*(x27));
x54=((x28)*(x3));
x55=((x54)+(x53));
x56=((x0)*(x2)*(x26));
x57=((x4)*(x52));
x58=((x57)+(x56));
x59=((x0)*(x26)*(x4));
x60=((-1.00000000000000)*(x2)*(x52));
x61=((x59)+(x60));
x62=((x20)*(x61));
x63=((x5)*(x58));
x64=((x55)*(x7));
x65=((x63)+(x64));
x66=((x15)*(x65));
x67=((x62)+(x66));
x68=((x5)*(x55));
x69=((-1.00000000000000)*(x58)*(x7));
x70=((x68)+(x69));
eerot[0]=((((x14)*(((((-1.00000000000000)*(x11)*(x7)))+(x13)))))+(((x12)*(x25))));
eerot[1]=((((x12)*(((((-1.00000000000000)*(x11)*(x7)))+(x13)))))+(((-1.00000000000000)*(x14)*(x25))));
eerot[2]=((((x18)*(x20)))+(((-1.00000000000000)*(x15)*(x23))));
eetrans[0]=((0.0790000000000000)+(((0.300000000000000)*(x22)))+(((-0.300000000000000)*(x21)))+(((-0.0450000000000000)*(x0)*(x1)))+(((0.550000000000000)*(x3)))+(((0.0450000000000000)*(x8)))+(((0.0450000000000000)*(x9))));
eerot[3]=((((x14)*(x40)))+(((x12)*(x49))));
eerot[4]=((((x12)*(x40)))+(((-1.00000000000000)*(x14)*(x49))));
eerot[5]=((((x20)*(x47)))+(((-1.00000000000000)*(x15)*(x43))));
eetrans[1]=((-0.191000000000000)+(((-0.0450000000000000)*(x29)))+(((-0.0450000000000000)*(x28)))+(((-0.0450000000000000)*(x32)))+(((-0.0450000000000000)*(x33)))+(((0.300000000000000)*(x2)*(x31)))+(((-0.550000000000000)*(x0)*(x27)))+(((-0.300000000000000)*(x41))));
eerot[6]=((((-1.00000000000000)*(x12)*(x67)))+(((-1.00000000000000)*(x14)*(x70))));
eerot[7]=((((x14)*(x67)))+(((-1.00000000000000)*(x12)*(x70))));
eerot[8]=((((x15)*(x61)))+(((-1.00000000000000)*(x20)*(x65))));
eetrans[2]=((0.905000000000000)+(((0.300000000000000)*(x59)))+(((0.550000000000000)*(x0)*(x26)))+(((-0.0450000000000000)*(x50)))+(((-0.300000000000000)*(x2)*(x52)))+(((0.0450000000000000)*(x51)))+(((0.0450000000000000)*(x56)))+(((0.0450000000000000)*(x57))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.00000000000000)*(r20));
new_r01=((-1.00000000000000)*(r21));
new_r02=((-1.00000000000000)*(r22));
new_px=((0.905000000000000)+(((-1.00000000000000)*(pz))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((0.191000000000000)+(py));
new_r20=r00;
new_r21=r01;
new_r22=r02;
new_pz=((-0.0790000000000000)+(px));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
IKReal x0=2232.04592246665;
IKReal x1=((0.396550000000000)+(((-1.00000000000000)*(pp))));
IKReal x2=((0.00133814288649598)*(x0)*(x1));
if( (x2) < -1.0001 || (x2) > 1.0001 )
    continue;
IKReal x3=IKasin(x2);
j3array[0]=((-1.34027003705633)+(((-1.00000000000000)*(x3))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.80132261653346)+(x3));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
{
    j3valid[1]=false;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x4=(px)*(px);
IKReal x5=(py)*(py);
IKReal x6=((x5)+(x4));
if( (x6) < (IKReal)-0.00001 )
    continue;
IKReal x7=IKsqrt(x6);
IKReal x8=IKabs(x7);
IKReal x9=((IKabs(x8) != 0)?((IKReal)1/(x8)):(IKReal)1.0e30);
IKReal x10=((0.300000000000000)*(sj2)*(sj3));
IKReal x11=((0.0450000000000000)*(sj2));
IKReal x12=((x11)+(x10));
IKReal x13=((cj3)*(x11));
IKReal x14=((((-1.00000000000000)*(x13)))+(x12));
IKReal x15=((x14)*(x9));
if( (x15) < -1.0001 || (x15) > 1.0001 )
    continue;
IKReal x16=IKasin(x15);
IKReal x17=((-1.00000000000000)*(px));
IKReal x18=IKatan2(py, x17);
j0array[0]=((((-1.00000000000000)*(x18)))+(((-1.00000000000000)*(x16))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x18)))+(x16));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
dummyeval[0]=((((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(sj2)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*(sj2)*((pz)*(pz))))+(((-1.00000000000000)*(sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x19=((6.66666666666667)*(cj0)*(cj3)*(px));
IKReal x20=((6.66666666666667)*(cj3)*(py)*(sj0));
IKReal x21=((12.2222222222222)*(py)*(sj0));
IKReal x22=((12.2222222222222)*(cj0)*(px));
IKReal x23=((cj0)*(px)*(sj3));
IKReal x24=((py)*(sj0)*(sj3));
IKReal x25=((cj2)*(cj3)*(pz));
IKReal x26=((x19)+(x24)+(x25)+(x20)+(x21)+(x22)+(x23));
IKReal x27=((cj2)*(pz));
IKReal x28=((6.66666666666667)*(sj3)*(x27));
IKReal x29=((x27)+(x28));
IKReal x30=((((-1.00000000000000)*(x29)))+(x26));
dummyeval[0]=x30;
dummyeval[1]=x30;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj2)*((pz)*(pz))))+(((-2.00000000000000)*(cj0)*(cj2)*(px)*(py)*(sj0)))+(((-1.00000000000000)*(cj2)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*(cj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x31=((0.300000000000000)*(sj3));
IKReal x32=((cj0)*(py));
IKReal x33=((0.0450000000000000)+(x32)+(x31));
IKReal x34=((0.0450000000000000)*(cj3));
IKReal x35=((px)*(sj0));
IKReal x36=((x35)+(x34));
IKReal x37=((((-1.00000000000000)*(x36)))+(x33));
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x37;
evalcond[3]=x37;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x38=((6.66666666666667)*(cj3));
IKReal x39=((12.2222222222222)+(sj3)+(x38));
dummyeval[0]=x39;
dummyeval[1]=x39;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x40=((6.66666666666667)*(cj3));
IKReal x41=((12.2222222222222)+(sj3)+(x40));
dummyeval[0]=x41;
dummyeval[1]=x41;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((6.66666666666667)*(cj0)*(cj3)*(px)))+(((6.66666666666667)*(cj3)*(py)*(sj0)))+(((12.2222222222222)*(py)*(sj0)))+(((12.2222222222222)*(cj0)*(px)))+(((cj0)*(px)*(sj3)))+(((py)*(sj0)*(sj3))));
dummyeval[1]=((12.2222222222222)+(sj3)+(((6.66666666666667)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x42=((0.300000000000000)*(cj3));
IKReal x43=((0.0450000000000000)*(sj3));
IKReal x44=((0.550000000000000)+(x42)+(x43));
j1array[0]=IKatan2(((((IKabs(((((0.550000000000000)*(cj0)*(px)))+(((0.550000000000000)*(py)*(sj0)))+(((cj0)*(px)*(x42)))+(((cj0)*(px)*(x43)))+(((py)*(sj0)*(x43)))+(((py)*(sj0)*(x42))))) != 0)?((IKReal)1/(((((0.550000000000000)*(cj0)*(px)))+(((0.550000000000000)*(py)*(sj0)))+(((cj0)*(px)*(x42)))+(((cj0)*(px)*(x43)))+(((py)*(sj0)*(x43)))+(((py)*(sj0)*(x42)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*((x44)*(x44))))+((pz)*(pz))))), ((pz)*(((IKabs(x44) != 0)?((IKReal)1/(x44)):(IKReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x146=((0.300000000000000)*(cj3));
IKReal x147=((0.0450000000000000)*(sj3));
IKReal x148=((0.550000000000000)+(x146)+(x147));
IKReal x149=((IKabs(x148) != 0)?((IKReal)1/(x148)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x149)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))), ((pz)*(x149)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x150=((0.300000000000000)*(cj3));
IKReal x151=((0.0450000000000000)*(sj3));
IKReal x152=((0.550000000000000)+(x151)+(x150));
IKReal x153=((IKabs(x152) != 0)?((IKReal)1/(x152)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x153)*(((((cj0)*(px)))+(((py)*(sj0)))))), ((pz)*(x153)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x154=((0.300000000000000)*(sj3));
IKReal x155=((px)*(sj0));
IKReal x156=((0.0450000000000000)*(cj3));
IKReal x157=((cj0)*(py));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((-0.0450000000000000)+(((-1.00000000000000)*(x154)))+(((-1.00000000000000)*(x155)))+(x157)+(x156));
evalcond[3]=((0.0450000000000000)+(((-1.00000000000000)*(x157)))+(((-1.00000000000000)*(x156)))+(x155)+(x154));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x158=((6.66666666666667)*(cj3));
IKReal x159=((12.2222222222222)+(sj3)+(x158));
dummyeval[0]=x159;
dummyeval[1]=x159;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x160=((6.66666666666667)*(cj3));
IKReal x161=((12.2222222222222)+(sj3)+(x160));
dummyeval[0]=x161;
dummyeval[1]=x161;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((12.2222222222222)+(sj3)+(((6.66666666666667)*(cj3))));
dummyeval[1]=((((6.66666666666667)*(cj0)*(cj3)*(px)))+(((6.66666666666667)*(cj3)*(py)*(sj0)))+(((12.2222222222222)*(py)*(sj0)))+(((12.2222222222222)*(cj0)*(px)))+(((cj0)*(px)*(sj3)))+(((py)*(sj0)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x162=((cj0)*(px));
IKReal x163=((py)*(sj0));
IKReal x164=((x162)+(x163));
j1array[0]=IKatan2(((-1.00000000000000)*(x164)*(((IKabs(((0.550000000000000)+(((0.300000000000000)*(cj3)))+(((0.0450000000000000)*(sj3))))) != 0)?((IKReal)1/(((0.550000000000000)+(((0.300000000000000)*(cj3)))+(((0.0450000000000000)*(sj3)))))):(IKReal)1.0e30))), ((pz)*(x164)*(((IKabs(((((0.0450000000000000)*(sj3)*(x162)))+(((0.0450000000000000)*(sj3)*(x163)))+(((0.550000000000000)*(x162)))+(((0.550000000000000)*(x163)))+(((0.300000000000000)*(cj3)*(x162)))+(((0.300000000000000)*(cj3)*(x163))))) != 0)?((IKReal)1/(((((0.0450000000000000)*(sj3)*(x162)))+(((0.0450000000000000)*(sj3)*(x163)))+(((0.550000000000000)*(x162)))+(((0.550000000000000)*(x163)))+(((0.300000000000000)*(cj3)*(x162)))+(((0.300000000000000)*(cj3)*(x163)))))):(IKReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x165=((0.300000000000000)*(cj3));
IKReal x166=((0.0450000000000000)*(sj3));
IKReal x167=((0.550000000000000)+(x166)+(x165));
IKReal x168=((IKabs(x167) != 0)?((IKReal)1/(x167)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x168)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))), ((pz)*(x168)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x169=((0.300000000000000)*(cj3));
IKReal x170=((0.0450000000000000)*(sj3));
IKReal x171=((0.550000000000000)+(x170)+(x169));
IKReal x172=((IKabs(x171) != 0)?((IKReal)1/(x171)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x172)*(((((cj0)*(px)))+(((py)*(sj0)))))), ((pz)*(x172)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x173=((cj0)*(py));
IKReal x174=((px)*(sj0));
IKReal x175=((((-1.00000000000000)*(x174)))+(x173));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x175;
evalcond[3]=x175;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz))))+(((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+(((-1.00000000000000)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x176=((6.66666666666667)*(cj3)*(pz));
IKReal x177=((6.66666666666667)*(py)*(sj0)*(sj3));
IKReal x178=((pz)*(sj3));
IKReal x179=((cj0)*(px));
IKReal x180=((py)*(sj0));
IKReal x181=((6.66666666666667)*(sj3)*(x179));
IKReal x182=((12.2222222222222)*(pz));
IKReal x183=((x179)+(x178)+(x177)+(x176)+(x180)+(x181)+(x182));
IKReal x184=((cj3)*(x180));
IKReal x185=((cj3)*(x179));
IKReal x186=((x184)+(x185));
IKReal x187=((((-1.00000000000000)*(x186)))+(x183));
dummyeval[0]=x187;
dummyeval[1]=x187;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x188=((6.66666666666667)*(cj0)*(cj3)*(px));
IKReal x189=((6.66666666666667)*(cj3)*(py)*(sj0));
IKReal x190=((12.2222222222222)*(py)*(sj0));
IKReal x191=((12.2222222222222)*(cj0)*(px));
IKReal x192=((cj0)*(px)*(sj3));
IKReal x193=((cj3)*(pz));
IKReal x194=((py)*(sj0)*(sj3));
IKReal x195=((x193)+(x192)+(x191)+(x190)+(x194)+(x188)+(x189));
IKReal x196=((6.66666666666667)*(pz)*(sj3));
IKReal x197=((x196)+(pz));
IKReal x198=((((-1.00000000000000)*(x197)))+(x195));
dummyeval[0]=x198;
dummyeval[1]=x198;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x199=((0.300000000000000)*(cj3));
IKReal x200=((0.0450000000000000)*(sj3));
IKReal x201=((0.550000000000000)+(x199)+(x200));
IKReal x202=((0.550000000000000)*(cj0)*(px));
IKReal x203=((py)*(sj0)*(x200));
IKReal x204=((cj0)*(px)*(x199));
IKReal x205=((0.550000000000000)*(py)*(sj0));
IKReal x206=((cj0)*(px)*(x200));
IKReal x207=((py)*(sj0)*(x199));
IKReal x208=((0.0450000000000000)*(cj3)*(pz));
IKReal x209=((x207)+(x206)+(x205)+(x204)+(x203)+(x202)+(x208));
IKReal x210=((0.0450000000000000)*(pz));
IKReal x211=((0.300000000000000)*(pz)*(sj3));
IKReal x212=((x210)+(x211));
IKReal x213=((x209)+(((-1.00000000000000)*(x212))));
IKReal x214=((IKabs(x213) != 0)?((IKReal)1/(x213)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x214)*(((((-1.00000000000000)*((x201)*(x201))))+((pz)*(pz))))), ((-1.00000000000000)*(x214)*(((((pz)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((x201)*(((0.0450000000000000)+(((0.300000000000000)*(sj3)))+(((-0.0450000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x215=((0.300000000000000)*(sj3));
IKReal x216=((0.0450000000000000)+(x215));
IKReal x217=((0.0450000000000000)*(cj3));
IKReal x218=((x216)+(((-1.00000000000000)*(x217))));
IKReal x219=((0.0450000000000000)*(py)*(sj0));
IKReal x220=((0.0450000000000000)*(pz)*(sj3));
IKReal x221=((0.550000000000000)*(pz));
IKReal x222=((0.300000000000000)*(cj3)*(pz));
IKReal x223=((0.0450000000000000)*(cj0)*(px));
IKReal x224=((py)*(sj0)*(x215));
IKReal x225=((cj0)*(px)*(x215));
IKReal x226=((x219)+(x221)+(x220)+(x223)+(x222)+(x225)+(x224));
IKReal x227=((py)*(sj0)*(x217));
IKReal x228=((cj0)*(px)*(x217));
IKReal x229=((x228)+(x227));
IKReal x230=((x226)+(((-1.00000000000000)*(x229))));
IKReal x231=((IKabs(x230) != 0)?((IKReal)1/(x230)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x231)*(((((-1.00000000000000)*(x218)*(((0.550000000000000)+(((0.300000000000000)*(cj3)))+(((0.0450000000000000)*(sj3)))))))+(((-1.00000000000000)*(pz)*(((((cj0)*(px)))+(((py)*(sj0)))))))))), ((x231)*((((pz)*(pz))+(((-1.00000000000000)*((x218)*(x218))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x232=((cj0)*(px));
IKReal x233=((py)*(sj0));
IKReal x234=((x232)+(x233));
IKReal x235=((0.300000000000000)*(sj3));
IKReal x236=((0.0450000000000000)+(x235));
IKReal x237=((0.0450000000000000)*(cj3));
IKReal x238=((((-1.00000000000000)*(x237)))+(x236));
IKReal x239=((0.300000000000000)*(cj3));
IKReal x240=((0.0450000000000000)*(sj3));
IKReal x241=((0.550000000000000)+(x239)+(x240));
IKReal x242=x5;
IKReal x243=(sj0)*(sj0);
IKReal x244=(x233)*(x233);
IKReal x245=((2.00000000000000)*(x232)*(x233));
IKReal x246=(pz)*(pz);
IKReal x247=(cj0)*(cj0);
IKReal x248=x4;
IKReal x249=(x232)*(x232);
IKReal x250=((x246)+(x245)+(x244)+(x249));
IKReal x251=((-1.00000000000000)*(x250));
IKReal x252=((IKabs(x251) != 0)?((IKReal)1/(x251)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x252)*(((((x234)*(x241)))+(((pz)*(x238)))))), ((x252)*(((((x234)*(x238)))+(((-1.00000000000000)*(pz)*(x241)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x253=((px)*(sj0));
IKReal x254=((cj0)*(py));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((x254)+(((-1.00000000000000)*(x253))));
evalcond[3]=((x253)+(((-1.00000000000000)*(x254))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x255=((4.26078431372549)*(cj3));
IKReal x256=(cj3)*(cj3);
IKReal x257=((1.20294117647059)*(x256));
IKReal x258=(sj3)*(sj3);
IKReal x259=((1.20294117647059)*(x258));
IKReal x260=((3.98071895424837)+(sj3)+(x259)+(x255)+(x257));
dummyeval[0]=x260;
dummyeval[1]=x260;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz))))+(((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+(((-1.00000000000000)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x261=((6.66666666666667)*(cj3)*(pz));
IKReal x262=((cj3)*(py)*(sj0));
IKReal x263=((cj0)*(cj3)*(px));
IKReal x264=((pz)*(sj3));
IKReal x265=((12.2222222222222)*(pz));
IKReal x266=((x265)+(x264)+(x261)+(x263)+(x262));
IKReal x267=((6.66666666666667)*(py)*(sj0)*(sj3));
IKReal x268=((cj0)*(px));
IKReal x269=((py)*(sj0));
IKReal x270=((6.66666666666667)*(sj3)*(x268));
IKReal x271=((x267)+(x269)+(x268)+(x270));
IKReal x272=((x266)+(((-1.00000000000000)*(x271))));
dummyeval[0]=x272;
dummyeval[1]=x272;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x273=((0.300000000000000)*(sj3));
IKReal x274=((0.0450000000000000)+(x273));
IKReal x275=((0.0450000000000000)*(cj3));
IKReal x276=((x274)+(((-1.00000000000000)*(x275))));
IKReal x277=((py)*(sj0)*(x275));
IKReal x278=((0.0450000000000000)*(pz)*(sj3));
IKReal x279=((0.550000000000000)*(pz));
IKReal x280=((0.300000000000000)*(cj3)*(pz));
IKReal x281=((cj0)*(px)*(x275));
IKReal x282=((x277)+(x278)+(x279)+(x281)+(x280));
IKReal x283=((0.0450000000000000)*(py)*(sj0));
IKReal x284=((0.0450000000000000)*(cj0)*(px));
IKReal x285=((py)*(sj0)*(x273));
IKReal x286=((cj0)*(px)*(x273));
IKReal x287=((x286)+(x285)+(x284)+(x283));
IKReal x288=((x282)+(((-1.00000000000000)*(x287))));
IKReal x289=((IKabs(x288) != 0)?((IKReal)1/(x288)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x289)*(((((x276)*(((0.550000000000000)+(((0.300000000000000)*(cj3)))+(((0.0450000000000000)*(sj3)))))))+(((pz)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))), ((x289)*(((((-1.00000000000000)*((x276)*(x276))))+((pz)*(pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x290=((0.300000000000000)*(cj3));
IKReal x291=((0.0450000000000000)*(sj3));
IKReal x292=((0.550000000000000)+(x290)+(x291));
IKReal x293=((0.300000000000000)*(sj3));
IKReal x294=((0.0450000000000000)+(x293));
IKReal x295=((0.0450000000000000)*(cj3));
IKReal x296=((((-1.00000000000000)*(x295)))+(x294));
IKReal x297=((cj0)*(px));
IKReal x298=((py)*(sj0));
IKReal x299=((x298)+(x297));
IKReal x300=((-1.00000000000000)*(x299));
IKReal x301=x5;
IKReal x302=(sj0)*(sj0);
IKReal x303=(x298)*(x298);
IKReal x304=((2.00000000000000)*(x297)*(x298));
IKReal x305=(pz)*(pz);
IKReal x306=(cj0)*(cj0);
IKReal x307=x4;
IKReal x308=(x297)*(x297);
IKReal x309=((x308)+(x304)+(x305)+(x303));
IKReal x310=((-1.00000000000000)*(x309));
IKReal x311=((IKabs(x310) != 0)?((IKReal)1/(x310)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x311)*(((((-1.00000000000000)*(x292)*(x300)))+(((-1.00000000000000)*(pz)*(x296)))))), ((x311)*(((((-1.00000000000000)*(pz)*(x292)))+(((x296)*(x300)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x312=((0.0765000000000000)*(sj3));
IKReal x313=((0.325950000000000)*(cj3));
IKReal x314=(cj3)*(cj3);
IKReal x315=((0.0920250000000000)*(x314));
IKReal x316=(sj3)*(sj3);
IKReal x317=((0.0920250000000000)*(x316));
IKReal x318=((0.304525000000000)+(x315)+(x317)+(x313)+(x312));
IKReal x319=((IKabs(x318) != 0)?((IKReal)1/(x318)):(IKReal)1.0e30);
IKReal x320=((0.300000000000000)*(cj3));
IKReal x321=((0.0450000000000000)*(sj3));
IKReal x322=((0.550000000000000)+(x320)+(x321));
IKReal x323=((cj0)*(px));
IKReal x324=((py)*(sj0));
IKReal x325=((x324)+(x323));
IKReal x326=((0.300000000000000)*(sj3));
IKReal x327=((0.0450000000000000)+(x326));
IKReal x328=((0.0450000000000000)*(cj3));
IKReal x329=((((-1.00000000000000)*(x328)))+(x327));
j1array[0]=IKatan2(((x319)*(((((pz)*(x329)))+(((-1.00000000000000)*(x322)*(x325)))))), ((x319)*(((((x325)*(x329)))+(((pz)*(x322)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x330=((0.300000000000000)*(cj3));
IKReal x331=((0.0450000000000000)*(sj3));
IKReal x332=((0.550000000000000)+(x331)+(x330));
IKReal x333=((cj0)*(py)*(sj2));
IKReal x334=((0.300000000000000)*(sj3));
IKReal x335=((0.0450000000000000)+(x333)+(x334));
IKReal x336=((px)*(sj0)*(sj2));
IKReal x337=((0.0450000000000000)*(cj3));
IKReal x338=((x337)+(x336));
IKReal x339=((x335)+(((-1.00000000000000)*(x338))));
IKReal x340=x5;
IKReal x341=(sj0)*(sj0);
IKReal x342=((cj2)*(x340)*(x341));
IKReal x343=(cj0)*(cj0);
IKReal x344=x4;
IKReal x345=((cj2)*(x343)*(x344));
IKReal x346=((2.00000000000000)*(cj0)*(cj2)*(px)*(py)*(sj0));
IKReal x347=(pz)*(pz);
IKReal x348=((cj2)*(x347));
IKReal x349=((x342)+(x346)+(x345)+(x348));
IKReal x350=((-1.00000000000000)*(x349));
IKReal x351=((IKabs(x350) != 0)?((IKReal)1/(x350)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x351)*(((((x332)*(((((cj2)*(py)*(sj0)))+(((cj0)*(cj2)*(px)))))))+(((pz)*(x339)))))), ((x351)*(((((x339)*(((((cj0)*(px)))+(((py)*(sj0)))))))+(((-1.00000000000000)*(cj2)*(pz)*(x332)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x352=((0.300000000000000)*(cj3));
IKReal x353=((0.0450000000000000)*(sj3));
IKReal x354=((0.550000000000000)+(x353)+(x352));
IKReal x355=((0.550000000000000)*(cj0)*(px));
IKReal x356=((py)*(sj0)*(x353));
IKReal x357=((cj0)*(px)*(x352));
IKReal x358=((0.550000000000000)*(py)*(sj0));
IKReal x359=((cj0)*(px)*(x353));
IKReal x360=((py)*(sj0)*(x352));
IKReal x361=((0.0450000000000000)*(cj2)*(cj3)*(pz));
IKReal x362=((x355)+(x357)+(x356)+(x359)+(x358)+(x360)+(x361));
IKReal x363=((0.0450000000000000)*(cj2)*(pz));
IKReal x364=((0.300000000000000)*(cj2)*(pz)*(sj3));
IKReal x365=((x363)+(x364));
IKReal x366=((((-1.00000000000000)*(x365)))+(x362));
IKReal x367=((IKabs(x366) != 0)?((IKReal)1/(x366)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x367)*((((pz)*(pz))+(((-1.00000000000000)*((x354)*(x354))))))), ((-1.00000000000000)*(x367)*(((((pz)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((x354)*(((((0.0450000000000000)*(cj2)))+(((0.300000000000000)*(cj2)*(sj3)))+(((-0.0450000000000000)*(cj2)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x368=((cj0)*(cj2)*(py));
IKReal x369=((cj2)*(px)*(sj0));
IKReal x370=((((-1.00000000000000)*(x369)))+(x368));
IKReal x371=((0.300000000000000)*(cj3));
IKReal x372=((0.0450000000000000)*(sj3));
IKReal x373=((0.550000000000000)+(x372)+(x371));
IKReal x374=(pz)*(pz);
IKReal x375=((sj2)*(x374));
IKReal x376=(cj0)*(cj0);
IKReal x377=x4;
IKReal x378=((sj2)*(x376)*(x377));
IKReal x379=((2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2));
IKReal x380=x5;
IKReal x381=(sj0)*(sj0);
IKReal x382=((sj2)*(x380)*(x381));
IKReal x383=((x382)+(x379)+(x378)+(x375));
IKReal x384=((-1.00000000000000)*(x383));
IKReal x385=((IKabs(x384) != 0)?((IKReal)1/(x384)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x385)*(((((pz)*(x370)))+(((x373)*(((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2)))))))))), ((x385)*(((((x370)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((-1.00000000000000)*(pz)*(sj2)*(x373)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x45=((sj1)*(sj3));
IKReal x46=((cj1)*(cj2)*(cj3));
IKReal x47=((((-1.00000000000000)*(x46)))+(x45));
IKReal x48=((cj1)*(sj3));
IKReal x49=((cj2)*(cj3)*(sj1));
IKReal x50=((x48)+(x49));
IKReal x51=((-1.00000000000000)*(x50));
IKReal x52=((sj0)*(x47));
IKReal x53=((cj0)*(x47));
IKReal x54=((cj3)*(sj0)*(sj2));
IKReal x55=((x54)+(x53));
IKReal x56=((-1.00000000000000)*(cj0)*(cj3)*(sj2));
IKReal x57=((x56)+(x52));
IKReal x58=((cj2)*(sj0));
IKReal x59=((cj0)*(cj1)*(sj2));
IKReal x60=((x59)+(x58));
IKReal x61=((cj1)*(sj0)*(sj2));
IKReal x62=((cj0)*(cj2));
IKReal x63=((x61)+(((-1.00000000000000)*(x62))));
IKReal x64=((cj2)*(x48));
IKReal x65=((cj3)*(sj1));
IKReal x66=((x64)+(x65));
IKReal x67=((-1.00000000000000)*(x66));
IKReal x68=((sj0)*(x67));
IKReal x69=((cj0)*(sj2)*(sj3));
IKReal x70=((x68)+(((-1.00000000000000)*(x69))));
IKReal x71=((cj1)*(cj3));
IKReal x72=((cj2)*(x45));
IKReal x73=((((-1.00000000000000)*(x72)))+(x71));
IKReal x74=((cj0)*(x67));
IKReal x75=((sj0)*(sj2)*(sj3));
IKReal x76=((x75)+(x74));
new_r00=((((r10)*(((((-1.00000000000000)*(cj0)*(cj3)*(sj2)))+(x52)))))+(((r00)*(x55)))+(((r20)*(x51))));
new_r01=((((r11)*(x57)))+(((r01)*(x55)))+(((r21)*(x51))));
new_r02=((((r22)*(x51)))+(((r02)*(x55)))+(((r12)*(x57))));
new_r10=((((r10)*(x63)))+(((r00)*(x60)))+(((r20)*(sj1)*(sj2))));
new_r11=((((r11)*(x63)))+(((r01)*(x60)))+(((r21)*(sj1)*(sj2))));
new_r12=((((r02)*(x60)))+(((r22)*(sj1)*(sj2)))+(((r12)*(x63))));
new_r20=((((r10)*(x70)))+(((r20)*(x73)))+(((r00)*(x76))));
new_r21=((((r21)*(x73)))+(((r11)*(x70)))+(((r01)*(x76))));
new_r22=((((r12)*(((x68)+(((-1.00000000000000)*(x69)))))))+(((r22)*(x73)))+(((r02)*(x76))));
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
cj5array[0]=new_r22;
if( cj5array[0] >= -1.0001 && cj5array[0] <= 1.0001 )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
{
    j5valid[1]=false;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj5)*((new_r02)*(new_r02))))+(((cj5)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=new_r22;
evalcond[2]=((-1.00000000000000)*(new_r22));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(new_r21, ((-1.00000000000000)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r02)*(new_r11)))+(((new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r02)*(new_r10)))+(((new_r00)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x77=((new_r02)*(new_r10));
IKReal x78=((new_r00)*(new_r12));
j4array[0]=IKatan2(((new_r00)*(((IKabs(((((-1.00000000000000)*(x77)))+(x78))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x77)))+(x78)))):(IKReal)1.0e30))), ((new_r10)*(((IKabs(((((-1.00000000000000)*(x78)))+(x77))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x78)))+(x77)))):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x79=((new_r02)*(new_r11));
IKReal x80=((new_r01)*(new_r12));
j4array[0]=IKatan2(((new_r01)*(((IKabs(((((-1.00000000000000)*(x79)))+(x80))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x79)))+(x80)))):(IKReal)1.0e30))), ((new_r11)*(((IKabs(((x79)+(((-1.00000000000000)*(x80))))) != 0)?((IKReal)1/(((x79)+(((-1.00000000000000)*(x80)))))):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x81=(new_r12)*(new_r12);
IKReal x82=(new_r02)*(new_r02);
IKReal x83=((x82)+(x81));
IKReal x84=((IKabs(x83) != 0)?((IKReal)1/(x83)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(x84)), ((new_r02)*(x84)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r01)))+(((-1.00000000000000)*(new_r10)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x85=((new_r10)*(new_r11));
IKReal x86=((new_r00)*(new_r01));
IKReal x87=((x86)+(x85));
j4array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(sj6)*(((IKabs(x87) != 0)?((IKReal)1/(x87)):(IKReal)1.0e30))), ((new_r11)*(sj6)*(((IKabs(x87) != 0)?((IKReal)1/(x87)):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x88=((new_r00)*(new_r12));
IKReal x89=((new_r02)*(new_r10));
j4array[0]=IKatan2(((new_r00)*(((IKabs(((x89)+(((-1.00000000000000)*(x88))))) != 0)?((IKReal)1/(((x89)+(((-1.00000000000000)*(x88)))))):(IKReal)1.0e30))), ((new_r10)*(((IKabs(((x88)+(((-1.00000000000000)*(x89))))) != 0)?((IKReal)1/(((x88)+(((-1.00000000000000)*(x89)))))):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x90=((new_r01)*(new_r12));
IKReal x91=((new_r02)*(new_r11));
j4array[0]=IKatan2(((new_r01)*(((IKabs(((x91)+(((-1.00000000000000)*(x90))))) != 0)?((IKReal)1/(((x91)+(((-1.00000000000000)*(x90)))))):(IKReal)1.0e30))), ((new_r11)*(((IKabs(((x90)+(((-1.00000000000000)*(x91))))) != 0)?((IKReal)1/(((x90)+(((-1.00000000000000)*(x91)))))):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IKfmod(((3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x92=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x92));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x92))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
IKReal x93=((1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x93;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x93;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x94=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x94));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x94))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x95=(new_r02)*(new_r02);
IKReal x96=((cj5)*(x95));
IKReal x97=(new_r12)*(new_r12);
IKReal x98=((cj5)*(x97));
IKReal x99=((x98)+(x96));
IKReal x100=((IKabs(x99) != 0)?((IKReal)1/(x99)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(new_r22)*(sj5)*(x100)), ((new_r02)*(new_r22)*(sj5)*(x100)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x101=((cj4)*(new_r12));
IKReal x102=((new_r02)*(sj4));
IKReal x103=((((-1.00000000000000)*(x102)))+(x101));
IKReal x104=((new_r12)*(sj4));
IKReal x105=((cj4)*(new_r02));
IKReal x106=((x104)+(x105));
evalcond[0]=((IKfmod(((3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x103;
evalcond[5]=x103;
evalcond[6]=x106;
evalcond[7]=x106;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x107=((cj4)*(new_r12));
IKReal x108=((new_r02)*(sj4));
IKReal x109=((((-1.00000000000000)*(x108)))+(x107));
IKReal x110=((new_r12)*(sj4));
IKReal x111=((cj4)*(new_r02));
IKReal x112=((x111)+(x110));
IKReal x113=((1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x113;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x109;
evalcond[5]=x109;
evalcond[6]=x112;
evalcond[7]=((-1.00000000000000)*(x112));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x113;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x114=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x114)), ((-1.00000000000000)*(new_r20)*(x114)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x115=(new_r12)*(new_r12);
IKReal x116=(new_r02)*(new_r02);
IKReal x117=((x116)+(x115));
IKReal x118=((IKabs(x117) != 0)?((IKReal)1/(x117)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj5)*(x118)), ((new_r02)*(sj5)*(x118)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x119=((cj4)*(new_r12));
IKReal x120=((new_r02)*(sj4));
IKReal x121=((((-1.00000000000000)*(x120)))+(x119));
IKReal x122=((new_r12)*(sj4));
IKReal x123=((cj4)*(new_r02));
IKReal x124=((x122)+(x123));
evalcond[0]=((IKfmod(((3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x121;
evalcond[5]=x121;
evalcond[6]=x124;
evalcond[7]=x124;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x125=((cj4)*(new_r12));
IKReal x126=((new_r02)*(sj4));
IKReal x127=((((-1.00000000000000)*(x126)))+(x125));
IKReal x128=((new_r12)*(sj4));
IKReal x129=((cj4)*(new_r02));
IKReal x130=((x128)+(x129));
IKReal x131=((1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x131;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x127;
evalcond[5]=x127;
evalcond[6]=x130;
evalcond[7]=((-1.00000000000000)*(x130));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x131;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x132=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x132)), ((-1.00000000000000)*(new_r20)*(x132)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x133=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x133)), ((-1.00000000000000)*(new_r20)*(x133)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x134=((new_r02)*(new_r11));
IKReal x135=((new_r01)*(new_r12));
IKReal x136=((x134)+(((-1.00000000000000)*(x135))));
IKReal x137=((IKabs(x136) != 0)?((IKReal)1/(x136)):(IKReal)1.0e30);
j4array[0]=IKatan2(((cj6)*(new_r12)*(x137)), ((cj6)*(new_r02)*(x137)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x138=((new_r02)*(new_r10));
IKReal x139=((new_r00)*(new_r12));
IKReal x140=((x138)+(((-1.00000000000000)*(x139))));
IKReal x141=((IKabs(x140) != 0)?((IKReal)1/(x140)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj6)*(x141)), ((new_r02)*(sj6)*(x141)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x142=(new_r12)*(new_r12);
IKReal x143=(new_r02)*(new_r02);
IKReal x144=((x142)+(x143));
IKReal x145=((IKabs(x144) != 0)?((IKReal)1/(x144)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj5)*(x145)), ((new_r02)*(sj5)*(x145)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "0b2bd0a086511a6ffc83f5b7d886726b"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
